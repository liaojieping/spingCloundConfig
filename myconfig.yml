server:
  port: 8089 #应用端口
spring:
  application:
    name: eureka-customer #应用名称
  profiles: dev
eureka:
  instance:
    prefer-ip-address: true
    instance-id: eureka-customer-hystrix1 #自定义hystrix服务器名称相关名称
  client:
    fetch-registry: true
    register-with-eureka: true
    serviceUrl:
      defaultZone: http://localhost:8751/eureka/ #注册中心地址，若想做成集群，在service-url配置多个地址即可
feign:
  hystrix:
    enabled: true  
---
server:
  port: 8088 #应用端口
spring:
  application:
    name: eureka-customer #应用名称
  redis:
    database: 2
    host: localhost
    port: 6379
    password: XqbSXMIThB6MyHWV
    jedis:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0
    timeout: 100ms  
  profiles: test
eureka:
  instance:
    prefer-ip-address: true
    instance-id: eureka-customer-hystrix1 #自定义hystrix服务器名称相关名称
  client:
    fetch-registry: true
    register-with-eureka: true
    serviceUrl:
      defaultZone: http://localhost:8751/eureka/ #注册中心地址，若想做成集群，在service-url配置多个地址即可
feign:
  hystrix:
    enabled: true  
security:
  oauth2:
    client:
      client-id: customer #要和认证服务中的配置一致，如果是使用 inMemory 还是 jdbc 方式。
      client-secret: user-secret-8888
      user-authorization-uri: http://localhost:8090/oauth/authorize #是授权码认证方式需要的
      access-token-uri: http://localhost:8090/oauth/token # 是密码模式需要用到的获取 token 的接口。
    resource:
      id: customer
      user-info-uri: user-info
    authorization:
      check-token-access: http://localhost:8090/oauth/check_token #服务端接收到来自客户端端的请求后，需要拿着请求中的 token 到认证服务端做 token 验证，就是请求的这个接口
    



